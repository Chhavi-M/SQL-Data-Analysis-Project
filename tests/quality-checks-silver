/*
===============================================================================
Quality Checks - Silver Layer

Purpose: This script performs various quality checks for data consistency, accuracy, 
         and standardization across the 'silver' layer. 
         It includes checks for:
         - Null or duplicate primary keys
		 - Unwanted spaces in string fields
         - Data standardization and consistency
         - Invalid date ranges and orders
         - Referential Integrity between related fields.
===============================================================================
*/


/* To check the quality of 'silver_products' table */

-- To check for nulls or duplicates in the Primary Key

SELECT product_id, COUNT(*) AS Count
FROM silver_products
GROUP BY product_id
HAVING product_id IS NULL OR Count>1;

-- To check for unwanted spaces in product_name, category or brand

SELECT product_name
FROM silver_products
WHERE product_name <> TRIM(product_name);

SELECT category
FROM silver_products
WHERE category <> TRIM(category);

SELECT brand
FROM silver_products
WHERE brand <> TRIM(brand);

-- To check for spelling errors in product_name, category

SELECT DISTINCT product_name
FROM silver_products
ORDER BY product_name;

SELECT DISTINCT category
FROM silver_products
ORDER BY category;

-- To check for any NULLS or negative number in price

SELECT price
FROM silver_products
WHERE price IS NULL OR price <=0;

-- To check for any NULLS or negative number in mrp

SELECT mrp
FROM silver_products
WHERE mrp IS NULL OR mrp <=0;

-- To check for any NULLS or negative number in margin_percentage

SELECT margin_percentage
FROM silver_products
WHERE margin_percentage IS NULL OR margin_percentage <0;

-- To check for any NULLS or negative number in shelf_life_days

SELECT shelf_life_days
FROM silver_products
WHERE shelf_life_days IS NULL OR shelf_life_days <=0;

-- To check for any NULLS or negative number in min_stock_level

SELECT min_stock_level
FROM silver_products
WHERE min_stock_level IS NULL OR min_stock_level <=0;

-- To check for any NULLS or negative number in max_stock_level

SELECT max_stock_level
FROM silver_products
WHERE max_stock_level IS NULL OR max_stock_level <=0;

-- To check for any discrepany in stock level maintained

SELECT product_id
FROM silver_products
WHERE min_stock_level>max_stock_level;

-- To check the relationship between price, mrp and margin_percentage

SELECT product_id
FROM silver_products
WHERE ROUND(((mrp-price)/mrp)*100,0) <> margin_percentage;

/* To check the quality of 'silver_customers' table */

-- To check for nulls or duplicates in the Primary Key

SELECT customer_id, COUNT(*) AS Count
FROM silver_customers
GROUP BY customer_id
HAVING customer_id IS NULL OR Count>1;

-- To check for unwanted spaces or nulls in customer_name

SELECT customer_name
FROM silver_customers
WHERE customer_name <> TRIM(customer_name) OR customer_name IS NULL;

-- To check for unwanted spaces in email or phone

SELECT customer_name
FROM silver_customers
WHERE email <> TRIM(email);

SELECT customer_name
FROM silver_customers
WHERE phone <> TRIM(phone);

-- To check for nulls in email or phone

SELECT customer_name
FROM silver_customers
WHERE email IS NULL OR phone IS NULL;

-- To check for invalid registration_date ((if registration_date is in future)

SELECT customer_name
FROM silver_customers
WHERE registration_date > CURDATE();

/* To check the quality of 'silver_orders' table */

-- To check for nulls or duplicates in the Primary Key

SELECT order_id, COUNT(*) AS Count
FROM silver_orders
GROUP BY order_id
HAVING order_id IS NULL OR Count>1;

-- To check for nulls or referential integrity: ensure all customer_ids in orders table exist in customers table

SELECT customer_id
FROM silver_orders
WHERE customer_id NOT IN ( SELECT customer_id
			   FROM silver_customers)
		  OR customer_id IS NULL;
                  
-- To check for data consistency: order_date should be earlier than both promised_delivery_time and actual_delivery_time

SELECT order_date
FROM silver_orders
WHERE order_date > promised_delivery_time OR order_date > actual_delivery_time;

-- To check for data consistency for delivery_status

SELECT DISTINCT delivery_status
FROM silver_orders;

SELECT delivery_status,
MIN(TIMEDIFF(actual_delivery_time, promised_delivery_time)) AS Min_time_diff,
MAX(TIMEDIFF(actual_delivery_time, promised_delivery_time)) AS max_time_diff
FROM silver_orders
GROUP BY delivery_status
ORDER BY Min_time_diff;

-- To check for data consistency for payment_methos

SELECT DISTINCT payment_method
FROM silver_orders;

-- To check for nulls in delivery_partner-id or store_id

SELECT delivery_partner_id
FROM silver_orders
WHERE delivery_partner_id IS NULL;

SELECT store_id
FROM silver_orders
WHERE store_id IS NULL;

/* To check the quality of 'silver_order_items' table */

-- To check for nulls or referential integrity: ensure all order_ids in order_items table exist in orders table

SELECT order_id
FROM silver_order_items
WHERE order_id NOT IN ( SELECT order_id
			FROM silver_orders )
               OR order_id IS NULL;
                        
-- To check for nulls or referential integrity: ensure all product_ids in order_items table exist in products table

SELECT product_id
FROM silver_order_items
WHERE product_id NOT IN ( SELECT product_id
			  FROM silver_products )
                 OR product_id IS NULL;
                        
-- To check for nulls, zero or negative number in quantity

SELECT quantity
FROM silver_order_items
WHERE quantity IS NULL OR quantity <=0;

-- To check for nulls, zero or negative number in unit_price

SELECT unit_price
FROM silver_order_items
WHERE unit_price IS NULL OR unit_price<=0;

/* To check the quality of 'silver_customer_feedback' table */

-- To check for nulls or duplicates in the Primary Key

SELECT feedback_id, COUNT(*) AS Count
FROM silver_customer_feedback
GROUP BY feedback_id
HAVING feedback_id IS NULL OR Count>1;

-- To check for nulls or referential integrity: ensure all order_ids in customer_feedback table exist in orders table

SELECT order_id
FROM silver_customer_feedback
WHERE order_id NOT IN ( SELECT order_id
			FROM silver_orders )
               OR order_id IS NULL;

-- To check for nulls or referential integrity: ensure all customer_ids in customer_feedback table exist in customers table

SELECT customer_id
FROM silver_customer_feedback
WHERE customer_id NOT IN ( SELECT customer_id
			   FROM silver_customers )
                  OR customer_id IS NULL;
                        
-- To check for data consistency in rating

SELECT DISTINCT rating
FROM silver_customer_feedback
ORDER BY rating;

-- To check for data consistency in feedback_category

SELECT DISTINCT feedback_category
FROM silver_customer_feedback;

-- To check for data consistency in sentiment

SELECT DISTINCT sentiment
FROM silver_customer_feedback;

SELECT sentiment,
MIN(rating) AS MinRating,
MAX(rating) AS MaxRating
FROM silver_customer_feedback
GROUP BY sentiment
ORDER BY MinRating;

/* To check the quality of 'silver_delivery_performance' table */

-- To check for nulls or referential integrity: ensure all order_ids in delivery_performance table exist in orders table

SELECT order_id
FROM silver_delivery_performance
WHERE order_id NOT IN ( SELECT order_id
			FROM silver_orders )
               OR order_id IS NULL;
                        
-- To check for nulls in deliver_partner_id

SELECT order_id
FROM silver_delivery_performance
WHERE deliver_partner_id IS NULL;

-- To check the integrity of delivery_time_minutes

SELECT order_id 
FROM silver_delivery_performance
WHERE TIMESTAMPDIFF(MINUTE, promised_time, actual_time) <> delivery_time_minutes;

-- To check the integrity of distance_km

SELECT distance_km
FROM silver_delivery_performance
WHERE distance_km IS NULL OR distance_km <=0;

-- To check for data consistency for delivery_status

SELECT DISTINCT delivery_status
FROM silver_delivery_performance;

SELECT delivery_status,
MIN(delivery_time_minutes) AS Min_time_diff,
MAX(delivery_time_minutes) AS max_time_diff
FROM silver_delivery_performance
GROUP BY delivery_status
ORDER BY Min_time_diff;

-- To check for nulls in reasons_if_delayed

SELECT DISTINCT reasons_if_delayed
FROM silver_delivery_performance;
